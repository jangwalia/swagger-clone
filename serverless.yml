service: dynamodb-crud-api

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-west-2
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.petsTableName}
    DYNAMO_STORE_TABLE: ${self:custom.storesTableName}

  
custom:
  petsTableName: pets-table-${self:provider.stage}
  storesTableName: store-table-${self:provider.stage}
plugins:
  - serverless-iam-roles-per-function
  


functions:
#****GET PET BY ID ROUTE**********
  getPet:
    handler: Endpoints/Get_pet.getPet
    name: get-pet
    memorySize: 128
    timeout: 10
    events:
      - http:
          path: pet/{petId}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action: 
          - "dynamodb:GetItem"
        Resource: !GetAtt PetsTable.Arn

# *********POST ROUTE FOR CREATING PET********

  createPet:
    handler: Endpoints/Create_pet.createPet
    name: create-pet
    memorySize: 128
    timeout: 10
    events:
      - http:
          path: pet
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action: 
          - "dynamodb:PutItem"
        Resource: !GetAtt PetsTable.Arn

# *******PUT ROUTE TO UPDATE PET********
  updatePet:
    handler: Endpoints/Update_pet.UpdatePet
    name: update-pet
    memorySize: 128
    timeout: 10
    events:
      - http:
          path: pet/{petId}
          method: PUT
    iamRoleStatements:
      - Effect: "Allow"
        Action: 
          - "dynamodb:UpdateItem"
        Resource: !GetAtt PetsTable.Arn


# ****DELETE ROUTE TO REMOVE PET*******
  deletePet:
    handler: Endpoints/Delete_pet.deletePet
    name: delete-pet
    memorySize: 128
    timeout: 10
    events:
      - http:
          path: pet/{petId}
          method: DELETE
    iamRoleStatements:
      - Effect: "Allow"
        Action: 
          - "dynamodb:DeleteItem"
        Resource: !GetAtt PetsTable.Arn




# ****GET ORDER DETAILS*********
  getOrder:
    handler: Endpoints/Get_order.getOrder
    name: get-order
    memorySize: 128
    timeout: 10
    events:
      - http:
          path: store/order/{orderId}
          method: GET
    
    iamRoleStatements:
      - Effect: "Allow"
        Action: 
          - "dynamodb:GetItem"
        Resource: !GetAtt StoresTable.Arn


# *******POST ORDER********
  createOrder:
    handler: Endpoints/Create_order.createOrder
    name: create-order
    memorySize: 128
    timeout: 10
    events:
      - http:
          path: store/order
          method: POST
    
    iamRoleStatements:
      - Effect: "Allow"
        Action: 
          - "dynamodb:PutItem"
        Resource: !GetAtt StoresTable.Arn

#******* DELETE ORDER******
  deleteOrder:
    handler: Endpoints/Delete_order.deleteOrder
    name: delete-order
    memorySize: 128
    timeout: 10
    events:
      - http:
          path: store/order/{orderId}
          method: DELETE
    
    iamRoleStatements:
      - Effect: "Allow"
        Action: 
          - "dynamodb:DeleteItem"
        Resource: !GetAtt StoresTable.Arn

# *******PETS TABLE ***********************

resources:
  Resources:
    PetsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.petsTableName}
        AttributeDefinitions:
          - AttributeName: petId
            AttributeType: S
          
        KeySchema:
          - AttributeName: petId
            KeyType: HASH
        
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

# *******STORE TABLE ***********************
    StoresTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.storesTableName}
        AttributeDefinitions:
          - AttributeName: orderId
            AttributeType: S
        
        KeySchema:
          - AttributeName: orderId
            KeyType: HASH
        
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1